generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model job {
  id                   Int             @id @default(autoincrement())
  title                String?         @db.Text
  reward               String?         @db.VarChar(50)
  overview             String?         @db.Text
  is_it_job            String?         @db.Text
  benefits             String?         @db.Text
  job_location         String?         @db.VarChar(255)
  job_team_size        String?         @db.Text
  job_address          String?         @db.Text
  employment_type      String?         @db.Text
  level                String?         @db.Text
  total_vacancies      String?         @db.Text
  gross_month_salary   String?         @db.Text
  interview_process    String?         @db.Text
  report_to            String?         @db.Text
  preferred_skill      String?         @db.Text
  job_responsibility   String?         @db.Text
  why_should_apply     String?         @db.Text
  job_required_skill   String?         @db.Text
  working_address      String?         @db.Text
  company_name         String?         @db.Text
  company_address      String?         @db.Text
  company_logo_url     String?         @db.Text
  company_description  String?         @db.Text
  company_website      String?         @db.Text
  company_working_hour String?         @db.Text
  company_team_size    String?         @db.Text
  memo                 String?         @db.Text
  source_site          String?         @db.VarChar(50)
  source_id            String?         @db.VarChar(50)
  is_active            Int?            @db.TinyInt
  tags                 String?         @db.Text
  updated_at           DateTime?       @db.DateTime(0)
  notifications        notifications[]

  @@unique([source_id, source_site], map: "unique_source")
}

model user {
  id         Int      @id @default(autoincrement())
  email      String   @db.VarChar(255)
  name       String?  @db.VarChar(100)
  created_at DateTime @default(now()) @db.DateTime(0)
}

model notifications {
  id         Int      @id @default(autoincrement())
  type       String?  @db.VarChar(255)
  content    String   @db.VarChar(255)
  job_id     Int?
  is_read    Boolean?
  user_id    Int
  created_at DateTime @db.DateTime(0)
  updated_at DateTime @default(now()) @db.DateTime(0)

  job job? @relation(fields: [job_id], references: [id])

  @@index([job_id], map: "notifications_job_id_fkey")
  @@index([user_id], map: "user_id")
}

model applications {
  id           Int     @id @default(autoincrement())
  email        String? @db.VarChar(255)
  name         String? @db.VarChar(255)
  tel          String? @db.VarChar(255)
  user_id      Int?
  job_id       Int
  candidate_id Int
  status       Int

  candidate candidates? @relation(fields: [candidate_id], references: [id])

  message          String?            @db.Text
  created_at       DateTime           @default(now()) @db.DateTime(0)
  updated_at       DateTime           @default(now()) @db.DateTime(0)
  application_logs application_logs[]
}

model application_logs {
  id             Int      @id @default(autoincrement())
  email          String?  @db.VarChar(255)
  name           String?  @db.VarChar(255)
  tel            String?  @db.VarChar(255)
  user_id        Int?
  job_id         Int
  status         Int
  message        String?  @db.Text
  created_at     DateTime @default(now()) @db.DateTime(0)
  updated_at     DateTime @default(now()) @db.DateTime(0)
  
  application_id Int
  application applications? @relation(fields: [application_id], references: [id])
}

model candidates {
  id            Int            @id @default(autoincrement())
  email         String?        @db.VarChar(255)
  name          String?        @db.VarChar(255)
  tel           String?        @db.VarChar(255)
  job_move_date String?        @db.VarChar(255)
  user_id       Int?
  created_at    DateTime       @default(now()) @db.DateTime(0)
  updated_at    DateTime       @default(now()) @db.DateTime(0)
  applications  applications[]
}

model failed_jobs {
  id         BigInt   @id @default(autoincrement()) @db.UnsignedBigInt
  uuid       String   @unique(map: "failed_jobs_uuid_unique")
  connection String   @db.Text
  queue      String   @db.Text
  payload    String   @db.LongText
  exception  String   @db.LongText
  failed_at  DateTime @default(now()) @db.Timestamp(0)
}

model migrations {
  id        Int    @id @default(autoincrement()) @db.UnsignedInt
  migration String @db.VarChar(255)
  batch     Int
}

model password_reset_tokens {
  email      String    @id
  token      String
  created_at DateTime? @db.Timestamp(0)
}

model personal_access_tokens {
  id             BigInt    @id @default(autoincrement()) @db.UnsignedBigInt
  tokenable_type String
  tokenable_id   BigInt    @db.UnsignedBigInt
  name           String
  token          String    @unique(map: "personal_access_tokens_token_unique") @db.VarChar(64)
  abilities      String?   @db.Text
  last_used_at   DateTime? @db.Timestamp(0)
  expires_at     DateTime? @db.Timestamp(0)
  created_at     DateTime? @db.Timestamp(0)
  updated_at     DateTime? @db.Timestamp(0)

  @@index([tokenable_type, tokenable_id], map: "personal_access_tokens_tokenable_type_tokenable_id_index")
}

model users {
  id                BigInt    @id @default(autoincrement()) @db.UnsignedBigInt
  name              String
  email             String    @unique(map: "users_email_unique")
  email_verified_at DateTime? @db.Timestamp(0)
  password          String
  remember_token    String?   @db.VarChar(100)
  created_at        DateTime? @db.Timestamp(0)
  updated_at        DateTime? @db.Timestamp(0)
}

model followed_jobs {
  id         Int       @id @default(autoincrement())
  user_id    Int?
  job_id     Int
  deleted_at DateTime? @db.DateTime(0)
  created_at DateTime  @default(now()) @db.DateTime(0)
  updated_at DateTime  @default(now()) @db.DateTime(0)
}
